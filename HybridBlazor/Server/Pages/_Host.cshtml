@page "_Host"
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using HybridBlazor.Client
@using Microsoft.Extensions.Options

@inject IOptions<HybridBlazor.Server.HybridOptions> HybridOptions

<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>HybridBlazor: @HybridOptions.Value.HybridType</title>
    <base href="/" />
    <link href="css/app.css" rel="stylesheet" />
    <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="HybridBlazor.Client.styles.css" rel="stylesheet" />
</head>

<body>

    @if (HybridOptions.Value.HybridType.ToString().StartsWith("Hybrid"))
    {
        <srvr-app>
            <component type="typeof(App)" render-mode="ServerPrerendered" />
        </srvr-app>
        <wasm-app style="display: none;">
            <component type="typeof(App)" render-mode="WebAssembly">
        </wasm-app>
    }

    <script>
        (function () {
            var setCookie = function (name, value) {
                var date = new Date();
                date.setTime(date.getTime() + (365 * 24 * 60 * 60 * 1000));
                var expires = "; expires=" + date.toUTCString();
                document.cookie = name + "=" + (value || "") + expires + "; path=/";
            }

            var getCookie = function (name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
                }
                return null;
            }

            var hubridInstanceId = getCookie('hubrid-instance-id');
            if (hubridInstanceId == null) {
                hubridInstanceId = '@Guid.NewGuid()';
                setCookie('hubrid-instance-id', hubridInstanceId);
            }

            window.getHubridInstanceId = function () { return hubridInstanceId; }
            window.getHybridType = function () { return '@HybridOptions.Value.HybridType'; }
        })();
    </script>

    @if (HybridOptions.Value.HybridType == HybridBlazor.Server.HybridType.ServerSide)
    {
        <app>
            <component type="typeof(App)" render-mode="ServerPrerendered" />
        </app>
        <script src="_framework/blazor.server.js"></script>
    }
    else if (HybridOptions.Value.HybridType == HybridBlazor.Server.HybridType.WebAssembly)
    {
        <app>
            <component type="typeof(App)" render-mode="WebAssemblyPrerendered">
        </app>
        <script src="_framework/blazor.webassembly.js"></script>
    }
    else
    {
        <script src="blazor.hybrid.js"></script>
    }

    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

</body>

</html>